import useDocusaurusContext from "@docusaurus/useDocusaurusContext";
import Layout from "@theme/Layout";
import { Space, Tabs } from "antd";
import React from "react";
import { TypeAnimation } from "react-type-animation";
import { CodeBlock } from "../components/code-block";

export default function Home(): JSX.Element {
    const { siteConfig } = useDocusaurusContext();

    const codeBlockHeight = "450px";
    return (
        <Layout title={`${siteConfig.title}`} description="MAUI App source generator">
            <div>
                <Space
                    direction="vertical"
                    style={{
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        textAlign: "center",
                    }}
                    className="margin-vert--lg"
                    size={50}
                >
                    <TypeAnimation
                        sequence={[`I spent hours to save your moments.`, 1000, "", 1000]}
                        repeat={Infinity}
                        style={{
                            fontFamily: "intel-one-mono",
                            fontSize: "2rem",
                            textDecoration: "underline",
                            textUnderlineOffset: "1rem",
                        }}
                    />

                    <p>Help you to create MAUI components without hundred lines of code as normal way.</p>
                </Space>

                <Tabs
                    defaultActiveKey="1"
                    centered
                    className="container"
                    type="line"
                    items={[
                        {
                            label: "My Code",
                            key: "1",
                            children: (
                                <CodeBlock
                                    language="csharp"
                                    code={appCode}
                                    codeBlockHeight={codeBlockHeight}
                                    highlightLinePredicate={(line) => line.match(/\[(BindableProp.*?)\]/g) !== null}
                                    highlightLineColor="rgba(255, 255, 255, 0.1)"
                                />
                            ),
                        },
                        {
                            label: "Generated Code",
                            key: "2",
                            children: (
                                <CodeBlock language="csharp" code={generatedCode} codeBlockHeight={codeBlockHeight} />
                            ),
                        },
                    ]}
                />
            </div>
        </Layout>
    );
}

const appCode = `
    using BindableProps;

    namespace MyMauiApp.Controls;

    public partial class NovelReview : ContentView
    {
        [BindableProp(DefaultBindingMode = (int)BindingMode.OneTime)]
        private string _name = "Kafka On The Shore";
        
        [BindableProp]
        private string _author = "Haruki Murakami";

        public NovelReview()
        {
            
        }
    }
`;

const generatedCode = `
    // <auto-generated/>
    using BindableProps;

    namespace MyMauiApp.Controls
    {
        public partial class NovelReview
        {

            public  static readonly BindableProperty NameProperty = BindableProperty.Create(
                nameof(Name),
                typeof(string),
                typeof(NovelReview),
                "Kafka On The Shore",
                (BindingMode)(int)BindingMode.OneTime,
                null,
                (bindable, oldValue, newValue) => 
                            ((NovelReview)bindable).Name = (string)newValue,
                null,
                null,
                null
            );

            public  string Name
            {
                get => _name;
                set 
                { 
                    OnPropertyChanging(nameof(Name));

                    _name = value;
                    SetValue(NovelReview.NameProperty, _name);

                    OnPropertyChanged(nameof(Name));
                }
            }

            public  static readonly BindableProperty AuthorProperty = BindableProperty.Create(
                nameof(Author),
                typeof(string),
                typeof(NovelReview),
                "Haruki Murakami",
                (BindingMode)0,
                null,
                (bindable, oldValue, newValue) => 
                            ((NovelReview)bindable).Author = (string)newValue,
                null,
                null,
                null
            );

            public  string Author
            {
                get => _author;
                set 
                { 
                    OnPropertyChanging(nameof(Author));

                    _author = value;
                    SetValue(NovelReview.AuthorProperty, _author);

                    OnPropertyChanged(nameof(Author));
                }
            }

        }
    }
`;
