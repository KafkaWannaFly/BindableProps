#pragma warning disable

// <auto-generated/>

namespace UnitTest.TestData.UnitTest
{
    public partial class MyClass
    {
        public static readonly BindablePropertyKey TextPropertyKey = BindableProperty.CreateReadOnly(
                            nameof(Text),
                            typeof(string),
                            typeof(MyClass),
                            "From every time",
                            (BindingMode)((int)BindingMode.TwoWay),
                            null,
                            (bindable, oldValue, newValue) =>
                                        ((MyClass) bindable).Text = (string) newValue,
                            null,
                            null,
                            null
                        );

        public static readonly BindableProperty TextProperty = TextPropertyKey.BindableProperty;

        public string Text
        {
            get => text;
            private set
            {
                OnPropertyChanging(nameof(Text));

                text = value;
                SetValue(MyClass.TextPropertyKey, text);

                OnPropertyChanged(nameof(Text));
            }
        }

        public static readonly BindablePropertyKey PlaceHolderPropertyKey = BindableProperty.CreateReadOnly(
                    nameof(PlaceHolder),
                    typeof(string),
                    typeof(MyClass),
                    "Always!",
                    (BindingMode)((int)BindingMode.OneWay),
                    ValidateValue,
                    PropertyChangedDelegate,
                    PropertyChangingDelegate,
                    CoerceValueDelegate,
                    CreateDefaultValueDelegate
                );

        public static readonly BindableProperty PlaceHolderProperty = PlaceHolderPropertyKey.BindableProperty;

        public string PlaceHolder
        {
            get => placeHolder;
            private set
            {
                OnPropertyChanging(nameof(PlaceHolder));

                placeHolder = value;
                SetValue(MyClass.PlaceHolderPropertyKey, placeHolder);

                OnPropertyChanged(nameof(PlaceHolder));
            }
        }
    }
}