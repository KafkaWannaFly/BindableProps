#pragma warning disable

// <auto-generated/>

namespace UnitTest.TestData.UnitTest
{
    public partial class SimpleUsage
    {
        public static readonly BindablePropertyKey TitlePropertyKey = BindableProperty.CreateReadOnly(
                    nameof(Title),
                    typeof(string),
                    typeof(SimpleUsage),
                    default,
                    (BindingMode)0,
                    null,
                    (bindable, oldValue, newValue) =>
                                ((SimpleUsage)bindable).Title = (string)newValue,
                    null,
                    null,
                    null
                );

        public static readonly BindableProperty TitleProperty = TitlePropertyKey.BindableProperty;

        public string Title
        {
            get => title;
            private set
            {
                OnPropertyChanging(nameof(Title));

                title = value;
                SetValue(SimpleUsage.TitlePropertyKey, title);

                OnPropertyChanged(nameof(Title));
            }
        }

        public static readonly BindablePropertyKey DescriptionPropertyKey = BindableProperty.CreateReadOnly(
                    nameof(Description),
                    typeof(string),
                    typeof(SimpleUsage),
                    "To the moon",
                    (BindingMode)0,
                    null,
                    (bindable, oldValue, newValue) =>
                                ((SimpleUsage)bindable).Description = (string)newValue,
                    null,
                    null,
                    null
                );

        public static readonly BindableProperty DescriptionProperty = DescriptionPropertyKey.BindableProperty;

        public string Description
        {
            get => _description;
            private set
            {
                OnPropertyChanging(nameof(Description));

                _description = value;
                SetValue(SimpleUsage.DescriptionPropertyKey, _description);

                OnPropertyChanged(nameof(Description));
            }
        }

        public static readonly BindablePropertyKey SideNotePropertyKey = BindableProperty.CreateReadOnly(
                    nameof(SideNote),
                    typeof(string),
                    typeof(SimpleUsage),
                    default,
                    (BindingMode)0,
                    null,
                    (bindable, oldValue, newValue) =>
                                ((SimpleUsage)bindable).SideNote = (string?)newValue,
                    null,
                    null,
                    null
                );

        public static readonly BindableProperty SideNoteProperty = SideNotePropertyKey.BindableProperty;

        public string? SideNote
        {
            get => sideNote;
            private set
            {
                OnPropertyChanging(nameof(SideNote));

                sideNote = value;
                SetValue(SimpleUsage.SideNotePropertyKey, sideNote);

                OnPropertyChanged(nameof(SideNote));
            }
        }

        public new static readonly BindablePropertyKey SizePropertyKey = BindableProperty.CreateReadOnly(
                    nameof(Size),
                    typeof(SizeF),
                    typeof(SimpleUsage),
                    default,
                    (BindingMode)0,
                    null,
                    (bindable, oldValue, newValue) =>
                                ((SimpleUsage)bindable).Size = (SizeF)newValue,
                    null,
                    null,
                    null
                );

        public new static readonly BindableProperty SizeProperty = SizePropertyKey.BindableProperty;

        public new SizeF Size
        {
            get => _size;
            private set
            {
                OnPropertyChanging(nameof(Size));

                _size = value;
                SetValue(SimpleUsage.SizePropertyKey, _size);

                OnPropertyChanged(nameof(Size));
            }
        }
    }
}